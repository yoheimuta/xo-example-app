// Package expmodels contains the types for schema 'test-xo-db'.
package expmodels

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// UserAuth represents a row from 'user_auths'.
type UserAuth struct {
	UserID       string    `json:"user_id"`       // user_id
	Email        string    `json:"email"`         // email
	PasswordHash string    `json:"password_hash"` // password_hash
	CreatedAt    time.Time `json:"created_at"`    // created_at
	UpdatedAt    time.Time `json:"updated_at"`    // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserAuth exists in the database.
func (ua *UserAuth) Exists() bool {
	return ua._exists
}

// Deleted provides information if the UserAuth has been deleted from the database.
func (ua *UserAuth) Deleted() bool {
	return ua._deleted
}

// Insert inserts the UserAuth to the database.
func (ua *UserAuth) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ua._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO user_auths (` +
		`user_id, email, password_hash, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ua.UserID, ua.Email, ua.PasswordHash, ua.CreatedAt, ua.UpdatedAt)
	_, err = db.Exec(sqlstr, ua.UserID, ua.Email, ua.PasswordHash, ua.CreatedAt, ua.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	ua._exists = true

	return nil
}

// Update updates the UserAuth in the database.
func (ua *UserAuth) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ua._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ua._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE user_auths SET ` +
		`email = ?, password_hash = ?, created_at = ?, updated_at = ?` +
		` WHERE user_id = ?`

	// run query
	XOLog(sqlstr, ua.Email, ua.PasswordHash, ua.CreatedAt, ua.UpdatedAt, ua.UserID)
	_, err = db.Exec(sqlstr, ua.Email, ua.PasswordHash, ua.CreatedAt, ua.UpdatedAt, ua.UserID)
	return err
}

// Save saves the UserAuth to the database.
func (ua *UserAuth) Save(db XODB) error {
	if ua.Exists() {
		return ua.Update(db)
	}

	return ua.Insert(db)
}

// Delete deletes the UserAuth from the database.
func (ua *UserAuth) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ua._exists {
		return nil
	}

	// if deleted, bail
	if ua._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM user_auths WHERE user_id = ?`

	// run query
	XOLog(sqlstr, ua.UserID)
	_, err = db.Exec(sqlstr, ua.UserID)
	if err != nil {
		return err
	}

	// set deleted
	ua._deleted = true

	return nil
}

// User returns the User associated with the UserAuth's UserID (user_id).
//
// Generated from foreign key 'user_auths_ibfk_1'.
func (ua *UserAuth) User(db XODB) (*User, error) {
	return UserByUserID(db, ua.UserID)
}

// UserAuthByEmail retrieves a row from 'user_auths' as a UserAuth.
//
// Generated from index 'user_auths_email_unique_idx'.
func UserAuthByEmail(db XODB, email string) (*UserAuth, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, email, password_hash, created_at, updated_at ` +
		`FROM user_auths ` +
		`WHERE email = ?`

	// run query
	XOLog(sqlstr, email)
	ua := UserAuth{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&ua.UserID, &ua.Email, &ua.PasswordHash, &ua.CreatedAt, &ua.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &ua, nil
}

// UserAuthByUserID retrieves a row from 'user_auths' as a UserAuth.
//
// Generated from index 'user_auths_user_id_pkey'.
func UserAuthByUserID(db XODB, userID string) (*UserAuth, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, email, password_hash, created_at, updated_at ` +
		`FROM user_auths ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	ua := UserAuth{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userID).Scan(&ua.UserID, &ua.Email, &ua.PasswordHash, &ua.CreatedAt, &ua.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &ua, nil
}
