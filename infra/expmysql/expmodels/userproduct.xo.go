// Package expmodels contains the types for schema 'test-xo-db'.
package expmodels

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// UserProduct represents a row from 'test-xo-db.user_products'.
type UserProduct struct {
	UserProductID string    `json:"user_product_id"` // user_product_id
	UserID        string    `json:"user_id"`         // user_id
	Title         string    `json:"title"`           // title
	Description   string    `json:"description"`     // description
	CreatedAt     time.Time `json:"created_at"`      // created_at
	UpdatedAt     time.Time `json:"updated_at"`      // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserProduct exists in the database.
func (up *UserProduct) Exists() bool {
	return up._exists
}

// Deleted provides information if the UserProduct has been deleted from the database.
func (up *UserProduct) Deleted() bool {
	return up._deleted
}

// Insert inserts the UserProduct to the database.
func (up *UserProduct) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if up._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO test-xo-db.user_products (` +
		`user_product_id, user_id, title, description, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, up.UserProductID, up.UserID, up.Title, up.Description, up.CreatedAt, up.UpdatedAt)
	_, err = db.Exec(sqlstr, up.UserProductID, up.UserID, up.Title, up.Description, up.CreatedAt, up.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	up._exists = true

	return nil
}

// Update updates the UserProduct in the database.
func (up *UserProduct) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if up._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE test-xo-db.user_products SET ` +
		`user_id = ?, title = ?, description = ?, created_at = ?, updated_at = ?` +
		` WHERE user_product_id = ?`

	// run query
	XOLog(sqlstr, up.UserID, up.Title, up.Description, up.CreatedAt, up.UpdatedAt, up.UserProductID)
	_, err = db.Exec(sqlstr, up.UserID, up.Title, up.Description, up.CreatedAt, up.UpdatedAt, up.UserProductID)
	return err
}

// Save saves the UserProduct to the database.
func (up *UserProduct) Save(db XODB) error {
	if up.Exists() {
		return up.Update(db)
	}

	return up.Insert(db)
}

// Delete deletes the UserProduct from the database.
func (up *UserProduct) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return nil
	}

	// if deleted, bail
	if up._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM test-xo-db.user_products WHERE user_product_id = ?`

	// run query
	XOLog(sqlstr, up.UserProductID)
	_, err = db.Exec(sqlstr, up.UserProductID)
	if err != nil {
		return err
	}

	// set deleted
	up._deleted = true

	return nil
}

// User returns the User associated with the UserProduct's UserID (user_id).
//
// Generated from foreign key 'user_products_ibfk_1'.
func (up *UserProduct) User(db XODB) (*User, error) {
	return UserByUserID(db, up.UserID)
}

// UserProductsByUserID retrieves a row from 'test-xo-db.user_products' as a UserProduct.
//
// Generated from index 'user_id'.
func UserProductsByUserID(db XODB, userID string) ([]*UserProduct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_product_id, user_id, title, description, created_at, updated_at ` +
		`FROM test-xo-db.user_products ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserProduct{}
	for q.Next() {
		up := UserProduct{
			_exists: true,
		}

		// scan
		err = q.Scan(&up.UserProductID, &up.UserID, &up.Title, &up.Description, &up.CreatedAt, &up.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &up)
	}

	return res, nil
}

// UserProductsByTitle retrieves a row from 'test-xo-db.user_products' as a UserProduct.
//
// Generated from index 'user_products_title_idx'.
func UserProductsByTitle(db XODB, title string) ([]*UserProduct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_product_id, user_id, title, description, created_at, updated_at ` +
		`FROM test-xo-db.user_products ` +
		`WHERE title = ?`

	// run query
	XOLog(sqlstr, title)
	q, err := db.Query(sqlstr, title)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserProduct{}
	for q.Next() {
		up := UserProduct{
			_exists: true,
		}

		// scan
		err = q.Scan(&up.UserProductID, &up.UserID, &up.Title, &up.Description, &up.CreatedAt, &up.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &up)
	}

	return res, nil
}

// UserProductByUserProductID retrieves a row from 'test-xo-db.user_products' as a UserProduct.
//
// Generated from index 'user_products_user_product_id_pkey'.
func UserProductByUserProductID(db XODB, userProductID string) (*UserProduct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_product_id, user_id, title, description, created_at, updated_at ` +
		`FROM test-xo-db.user_products ` +
		`WHERE user_product_id = ?`

	// run query
	XOLog(sqlstr, userProductID)
	up := UserProduct{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userProductID).Scan(&up.UserProductID, &up.UserID, &up.Title, &up.Description, &up.CreatedAt, &up.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &up, nil
}
